[
    {
        "id": "c872af2.723445",
        "type": "tab",
        "label": "VR Sample",
        "disabled": false,
        "info": ""
    },
    {
        "id": "62513743.c389f8",
        "type": "template",
        "z": "c872af2.723445",
        "name": "upload image file",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"ja\" class=\"no-js\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\" />\n  <title>Watson Visual Recognition on Node-RED</title>\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n</head>\n<body>\n<div class=\"container-fluid\">\n  <div class=\"col-sm-12\">\n    <p>Watson Visual Recognition on Node-RED</p>\n  </div>\n\n  <div class=\"panel panel-success col-sm-12\">\n    <div class=\"panel-heading\">\n      Select an image file\n    </div>\n\n    <div class=\"panel-body\" style=\"height:300px;\">\n      <div class=\"row\">\n        <form id=\"src_image\" action=\"\" method=\"post\" enctype=\"multipart/form-data\">\n          <input class=\"btn btn-info btn-ls\" type=\"file\" name=\"imagedata\" accept=\"image/*\"  />\n        </form>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"btn btn-danger btn-ls\" onclick=\"callVisualRecognition()\"/>\n          Analyze\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"preview\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"panel-footer\">\n      <div id=\"result\"></div>\n    </div>\n\n  </div>\n</div>\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js\"></script>\n\n<script type=\"text/javascript\">\n    var callVisualRecognition = function() {\n\n      // get form data\n      var formdata = new FormData($('#src_image').get(0));\n\n      console.log(formdata);\n\n      // upload as POST\n      $.ajax({\n          url  : \"./vrtest-post\",\n          type : \"POST\",\n          data : formdata,\n          cache       : false,\n          contentType : false,\n          processData : false,\n          dataType    : \"html\"\n      })\n      .done(function(data, textStatus, jqXHR) {\n        var result_element = document.getElementById('result');\n\n        var objResult = JSON.parse(data);\n\n        // delete child nodes\n        if (result_element.hasChildNodes()){\n          for (var i=result_element.childNodes.length-1; i>=0; i--) {\n            result_element.removeChild(result_element.childNodes[i]);\n          }\n        }\n\n        // set results\n        len = objResult.images[0].classifiers[0].classes.length;\n        for(i = 0; i<len; i++){\n\n            // Name\n            var name;\n            name = document.createTextNode(\"name=\"+objResult.images[0].classifiers[0].classes[i].class);\n            var nameBox = document.createElement('p');\n            nameBox.appendChild(name);\n            result_element.appendChild(nameBox);\n    \n            // Score\n            var score;\n            score = document.createTextNode(\"score=\"+objResult.images[0].classifiers[0].classes[i].score);\n            var scoreBox = document.createElement('p');\n            scoreBox.appendChild(score);\n            result_element.appendChild(scoreBox);\n        }\n\n        console.log(objResult);\n      })\n      .fail(function(jqXHR, textStatus, errorThrown) {\n          // connection error\n          // do nothing\n          return;\n      })\n      .always(function(data) {\n        // do nothing\n      });\n    }\n</script>\n\n<script>\n$(function(){\n  // image preview\n  $('form').on('change', 'input[type=\"file\"]', function(e) {\n    var file = e.target.files[0],\n        reader = new FileReader(),\n        $preview = $(\".preview\");\n        t = this;\n\n    // do nothing other than image file\n    if(file.type.indexOf(\"image\") < 0){\n      return false;\n    }\n\n    // complete loading image file\n    reader.onload = (function(file) {\n      return function(e) {\n        //delete existing preview\n        $preview.empty();\n        $preview.append($('<img>').attr({\n                  src: e.target.result,\n                  height: \"150px\",\n                  class: \"preview\",\n                  title: file.name\n              }));\n      };\n    })(file);\n\n    reader.readAsDataURL(file);\n  });\n});\n\n</script>\n</body>\n</html>\n",
        "x": 350,
        "y": 60,
        "wires": [
            [
                "72abc286.ea170c"
            ]
        ]
    },
    {
        "id": "53d48c7a.b178e4",
        "type": "http in",
        "z": "c872af2.723445",
        "name": "",
        "url": "/vrtest",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "62513743.c389f8"
            ]
        ]
    },
    {
        "id": "72abc286.ea170c",
        "type": "http response",
        "z": "c872af2.723445",
        "name": "http response",
        "x": 600,
        "y": 60,
        "wires": []
    },
    {
        "id": "247d760a.dfd32a",
        "type": "function",
        "z": "c872af2.723445",
        "name": "get jpeg",
        "func": "var buf = msg.req.body;\nvar SOI = new Buffer(\"FFD8\",\"hex\");\nvar EOI = new Buffer(\"FFD9\",\"hex\");\nvar iSOI = 0;\nvar file = \"\";\n\nfor (var i=0 ; i<=buf.length ; i++) {\n    if(SOI.equals(buf.slice(i,i+2))) {\n        iSOI = i;\n        }\n    if(EOI.equals(buf.slice(i,i+2))) {\n        file = buf.slice(iSOI,i+2);\n        break;\n        }\n    }\n\nmsg.file = file;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 320,
        "y": 140,
        "wires": [
            [
                "db38c2c2.859c3"
            ]
        ]
    },
    {
        "id": "9e758391.a7c37",
        "type": "http in",
        "z": "c872af2.723445",
        "name": "",
        "url": "/vrtest-post",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 125,
        "y": 128,
        "wires": [
            [
                "247d760a.dfd32a"
            ]
        ]
    },
    {
        "id": "db38c2c2.859c3",
        "type": "function",
        "z": "c872af2.723445",
        "name": "parse",
        "func": "msg.payload = msg.file;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 230,
        "y": 200,
        "wires": [
            [
                "8ec0abbe.3c8bd8"
            ]
        ]
    },
    {
        "id": "e132bd49.1e8a5",
        "type": "json",
        "z": "c872af2.723445",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 570,
        "y": 280,
        "wires": [
            [
                "c3ea1626.ee7438",
                "5faded5c.2d2ee4"
            ]
        ]
    },
    {
        "id": "3181ec17.e59b54",
        "type": "debug",
        "z": "c872af2.723445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "result",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "c3ea1626.ee7438",
        "type": "http response",
        "z": "c872af2.723445",
        "name": "http response",
        "x": 780,
        "y": 320,
        "wires": []
    },
    {
        "id": "5faded5c.2d2ee4",
        "type": "debug",
        "z": "c872af2.723445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 770,
        "y": 240,
        "wires": []
    },
    {
        "id": "6d491be2.b01434",
        "type": "function",
        "z": "c872af2.723445",
        "name": "parse",
        "func": "msg.payload = msg.result;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "e132bd49.1e8a5"
            ]
        ]
    },
    {
        "id": "8ec0abbe.3c8bd8",
        "type": "visual-recognition-v3",
        "z": "c872af2.723445",
        "name": "",
        "vr-service-endpoint": "https://gateway.watsonplatform.net/visual-recognition/api",
        "image-feature": "classifyImage",
        "lang": "en",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "6d491be2.b01434",
                "3181ec17.e59b54"
            ]
        ]
    }
]